# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Search for alerts generated by the rules engine in Google SecOps.

API reference: https://cloud.google.com/chronicle/docs/reference/rest/v1alpha/projects.locations.instances.legacy/legacySearchRulesAlerts
"""

import os
from typing import Dict

from google.auth.transport import requests


def search_rules_alerts(
    http_session: requests.AuthorizedSession, start_time: str, end_time: str, rule_status: str | None = None
) -> Dict:
    """Search for alerts generated by the rules engine in Google SecOps.

    Args:
        http_session: Authorized session for HTTP requests.
        start_time: Beginning of time range to search for alerts.
            A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
            digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        end_time: End of time range to search for alerts.
            A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
            digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        rule_status (optional): Filter alerts by rule status. Valid values are ACTIVE, ARCHIVED, and ALL.
            Uses ACTIVE by default.
            API reference: https://cloud.google.com/chronicle/docs/reference/rest/v1alpha/projects.locations.instances.legacy/legacySearchRulesAlerts#RuleStatus

    Returns:
        Dictionary containing alerts aggregated by rule if there are any.

    Raises:
        requests.exceptions.HTTPError: HTTP request resulted in an error (response.status_code >= 400).
    """
    url = f"{os.environ['GOOGLE_SECOPS_API_BASE_URL']}/{os.environ['GOOGLE_SECOPS_INSTANCE']}/legacy:legacySearchRulesAlerts"
    params = {"time_range.start_time": start_time, "time_range.end_time": end_time, "status": rule_status}

    response = http_session.request(method="GET", url=url, params=params)

    if response.status_code >= 400:
        print(response.text)
        response.raise_for_status()

    response_json = response.json()

    return response_json
